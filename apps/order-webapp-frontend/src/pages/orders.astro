---
import Layout from '../layouts/Layout.astro';
---

<Layout title="My Orders - Galette-Sausage">
  <section class="py-12">
    <div class="container mx-auto px-4">
      <h1 class="text-4xl font-bold text-center text-galette-800 mb-8">
        My Orders
      </h1>

      <div class="max-w-4xl mx-auto">
        <div id="orders-list" class="space-y-6">
          <!-- Will be populated by JavaScript -->
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  interface Order {
    id: number;
    customerName: string;
    phone: string;
    address: string;
    items: any[];
    totalPrice: string;
    status: string;
    createdAt: string;
    notes?: string;
  }

  async function loadOrders() {
    try {
      const response = await fetch('/api/orders/my-orders', {
        credentials: 'include'
      });
      
      if (!response.ok) throw new Error('Failed to load orders');
      
      const orders: Order[] = await response.json();
      renderOrders(orders);
    } catch (error) {
      window.showToast('Failed to load orders', 'error');
    }
  }

  function renderOrders(orders: Order[]) {
    const container = document.getElementById('orders-list');
    if (!container) return;
    
    if (orders.length === 0) {
      container.innerHTML = `
        <div class="bg-white rounded-lg shadow-lg p-8 text-center">
          <p class="text-gray-600 text-lg mb-4">No orders yet</p>
          <a href="/order" class="inline-block bg-galette-600 text-white font-semibold py-2 px-6 rounded-lg hover:bg-galette-700 transition duration-200">
            Place Your First Order
          </a>
        </div>
      `;
    } else {
      container.innerHTML = orders.map(order => {
        const orderDate = new Date(order.createdAt);
        const deliveryTime = new Date(orderDate.getTime() + 30 * 60000); // Add 30 minutes
        const now = new Date();
        const isDelivered = now > deliveryTime;
        
        return `
          <div class="bg-white rounded-lg shadow-lg p-6">
            <div class="flex justify-between items-start mb-4">
              <div>
                <h3 class="text-xl font-semibold text-gray-800">
                  Order #${order.id}
                </h3>
                <p class="text-sm text-gray-600">
                  ${orderDate.toLocaleDateString()} at ${orderDate.toLocaleTimeString()}
                </p>
              </div>
              <div class="text-right">
                <span class="inline-block px-3 py-1 rounded-full text-sm font-medium ${
                  getStatusColor(order.status)
                }">
                  ${getStatusLabel(order.status, isDelivered)}
                </span>
                <p class="text-lg font-semibold text-galette-700 mt-2">
                  ${order.totalPrice}â‚¬
                </p>
              </div>
            </div>
            
            <div class="border-t pt-4">
              <h4 class="font-medium text-gray-700 mb-2">Items:</h4>
              ${order.items.map(item => `
                <div class="text-sm text-gray-600 mb-1">
                  â€¢ ${item.quantity}x ${item.galetteType.name}
                  ${item.sauces.length > 0 ? 
                    `<span class="text-xs"> (${item.sauces.map((s: any) => s.name).join(', ')})</span>` 
                    : ''}
                  ${Object.keys(item.toppingQuantities).length > 0 ? 
                    `<span class="text-xs"> (${Object.entries(item.toppingQuantities).map(([t, q]: any) => 
                      `${t.name} x${q}`).join(', ')})</span>` 
                    : ''}
                </div>
              `).join('')}
            </div>
            
            <div class="border-t pt-4 mt-4">
              <p class="text-sm text-gray-600">
                <strong>Delivery to:</strong> ${order.address}
              </p>
              <p class="text-sm text-gray-600">
                <strong>Phone:</strong> ${order.phone}
              </p>
              ${order.notes ? `
                <p class="text-sm text-gray-600 mt-1">
                  <strong>Notes:</strong> ${order.notes}
                </p>
              ` : ''}
              <p class="text-sm mt-2 ${isDelivered ? 'text-green-600' : 'text-galette-600'}">
                ðŸš´ ${isDelivered ? 'Delivered' : `Delivery by ${deliveryTime.toLocaleTimeString()}`}
              </p>
            </div>
          </div>
        `;
      }).join('');
    }
  }

  function getStatusColor(status: string): string {
    const colors: { [key: string]: string } = {
      'PENDING': 'bg-yellow-100 text-yellow-800',
      'CONFIRMED': 'bg-blue-100 text-blue-800',
      'PREPARING': 'bg-orange-100 text-orange-800',
      'OUT_FOR_DELIVERY': 'bg-purple-100 text-purple-800',
      'DELIVERED': 'bg-green-100 text-green-800',
      'CANCELLED': 'bg-red-100 text-red-800'
    };
    return colors[status] || 'bg-gray-100 text-gray-800';
  }

  function getStatusLabel(status: string, isDelivered: boolean): string {
    if (isDelivered && status !== 'CANCELLED') return 'Delivered';
    
    const labels: { [key: string]: string } = {
      'PENDING': 'Pending',
      'CONFIRMED': 'Confirmed',
      'PREPARING': 'Preparing',
      'OUT_FOR_DELIVERY': 'Out for Delivery',
      'DELIVERED': 'Delivered',
      'CANCELLED': 'Cancelled'
    };
    return labels[status] || status;
  }

  // Load orders on page load
  loadOrders();
  
  // Refresh orders every 30 seconds
  setInterval(loadOrders, 30000);
</script>