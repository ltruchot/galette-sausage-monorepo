---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Basket - Galette-Sausage">
  <section class="py-12">
    <div class="container mx-auto px-4">
      <h1 class="text-4xl font-bold text-center text-galette-800 mb-8">
        Your Basket
      </h1>

      <div class="max-w-4xl mx-auto">
        <!-- Basket Items -->
        <div id="basket-content" class="space-y-4 mb-8">
          <!-- Will be populated by JavaScript -->
        </div>

        <!-- Delivery Form (shown when basket has items) -->
        <div id="checkout-form" class="hidden">
          <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4">
              Delivery Information
            </h2>
            <form id="delivery-form" class="space-y-4">
              <div>
                <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
                  Your Name
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  required
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-galette-500"
                />
              </div>
              <div>
                <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">
                  Phone Number
                </label>
                <input
                  type="tel"
                  id="phone"
                  name="phone"
                  required
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-galette-500"
                />
              </div>
              <div>
                <label for="address" class="block text-sm font-medium text-gray-700 mb-1">
                  Delivery Address
                </label>
                <textarea
                  id="address"
                  name="address"
                  rows="3"
                  required
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-galette-500"
                ></textarea>
              </div>
              <div>
                <label for="notes" class="block text-sm font-medium text-gray-700 mb-1">
                  Special Instructions (Optional)
                </label>
                <textarea
                  id="notes"
                  name="notes"
                  rows="2"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-galette-500"
                ></textarea>
              </div>
            </form>
          </div>

          <!-- Order Summary -->
          <div class="bg-galette-100 rounded-lg p-6 mb-6">
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-xl font-semibold text-galette-800">Order Summary</h3>
              <p class="text-2xl font-bold text-galette-700" id="total-price">0.00â‚¬</p>
            </div>
            <p class="text-sm text-gray-600">
              ðŸš´ Delivery in 30 minutes after payment
            </p>
          </div>

          <!-- Checkout Button -->
          <button
            id="checkout-btn"
            class="w-full bg-galette-600 text-white font-semibold py-4 px-6 rounded-lg hover:bg-galette-700 transition duration-200 text-lg"
          >
            Pay & Place Order
          </button>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  interface BasketData {
    items: any[];
    totalPrice: string;
    itemCount: number;
  }

  async function loadBasket() {
    try {
      const response = await fetch('/api/basket', {
        credentials: 'include'
      });
      
      if (!response.ok) throw new Error('Failed to load basket');
      
      const data: BasketData = await response.json();
      renderBasket(data);
    } catch (error) {
      window.showToast('Failed to load basket', 'error');
    }
  }

  function renderBasket(data: BasketData) {
    const container = document.getElementById('basket-content');
    const checkoutForm = document.getElementById('checkout-form');
    const totalPriceEl = document.getElementById('total-price');
    
    if (!container) return;
    
    if (data.items.length === 0) {
      container.innerHTML = `
        <div class="bg-white rounded-lg shadow-lg p-8 text-center">
          <p class="text-gray-600 text-lg mb-4">Your basket is empty</p>
          <a href="/order" class="inline-block bg-galette-600 text-white font-semibold py-2 px-6 rounded-lg hover:bg-galette-700 transition duration-200">
            Start Ordering
          </a>
        </div>
      `;
      checkoutForm?.classList.add('hidden');
    } else {
      container.innerHTML = data.items.map(item => `
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex justify-between items-start">
            <div class="flex-grow">
              <h3 class="text-lg font-semibold text-gray-800">${item.galetteType.name}</h3>
              ${item.sauces.length > 0 ? `
                <p class="text-sm text-gray-600 mt-1">
                  Sauces: ${item.sauces.map((s: any) => s.name).join(', ')}
                </p>
              ` : ''}
              ${Object.keys(item.toppingQuantities).length > 0 ? `
                <p class="text-sm text-gray-600 mt-1">
                  Toppings: ${Object.entries(item.toppingQuantities).map(([topping, qty]: any) => 
                    `${topping.name} x${qty}`
                  ).join(', ')}
                </p>
              ` : ''}
              <div class="flex items-center mt-3 space-x-4">
                <div class="flex items-center space-x-2">
                  <button 
                    onclick="updateQuantity(${item.id}, ${item.quantity - 1})"
                    class="bg-gray-200 text-gray-700 px-2 py-1 rounded hover:bg-gray-300"
                  >
                    -
                  </button>
                  <span class="font-medium">Qty: ${item.quantity}</span>
                  <button 
                    onclick="updateQuantity(${item.id}, ${item.quantity + 1})"
                    class="bg-gray-200 text-gray-700 px-2 py-1 rounded hover:bg-gray-300"
                  >
                    +
                  </button>
                </div>
                <button 
                  onclick="removeItem(${item.id})"
                  class="text-red-600 hover:text-red-700"
                >
                  Remove
                </button>
              </div>
            </div>
            <div class="text-right">
              <p class="text-lg font-semibold text-galette-700">
                ${(parseFloat(item.galetteType.price) * item.quantity).toFixed(2)}â‚¬
              </p>
            </div>
          </div>
        </div>
      `).join('');
      
      checkoutForm?.classList.remove('hidden');
      if (totalPriceEl) totalPriceEl.textContent = `${data.totalPrice}â‚¬`;
    }
  }

  window.updateQuantity = async function(itemId: number, newQty: number) {
    if (newQty < 1) return;
    
    try {
      const response = await fetch(`/api/basket/item/${itemId}/quantity?quantity=${newQty}`, {
        method: 'PATCH',
        credentials: 'include'
      });
      
      if (response.ok) {
        loadBasket();
        (window as any).updateBasketCount?.();
      } else {
        window.showToast('Failed to update quantity', 'error');
      }
    } catch (error) {
      window.showToast('Error updating quantity', 'error');
    }
  };

  window.removeItem = async function(itemId: number) {
    if (!confirm('Remove this item from basket?')) return;
    
    try {
      const response = await fetch(`/api/basket/item/${itemId}`, {
        method: 'DELETE',
        credentials: 'include'
      });
      
      if (response.ok) {
        window.showToast('Item removed', 'success');
        loadBasket();
        (window as any).updateBasketCount?.();
      } else {
        window.showToast('Failed to remove item', 'error');
      }
    } catch (error) {
      window.showToast('Error removing item', 'error');
    }
  };

  // Checkout
  document.getElementById('checkout-btn')?.addEventListener('click', async () => {
    const form = document.getElementById('delivery-form') as HTMLFormElement;
    if (!form.reportValidity()) return;
    
    const formData = new FormData(form);
    const orderData = Object.fromEntries(formData.entries());
    
    try {
      const response = await fetch('/api/orders', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(orderData)
      });
      
      if (response.ok) {
        const order = await response.json();
        window.showToast('Order placed successfully! Delivery in 30 minutes.', 'success');
        // Redirect to orders page
        setTimeout(() => {
          window.location.href = '/orders';
        }, 1500);
      } else {
        const error = await response.text();
        window.showToast(error || 'Failed to place order', 'error');
      }
    } catch (error) {
      window.showToast('Error placing order', 'error');
    }
  });

  // Load basket on page load
  loadBasket();
</script>